CC =g++
CFLAGS = -I. -I$(HOME)/fastflow -std=c++11 -g -pthread

.PHONY: allTests clean
	
parallel_main.out: parallel_main.o Node.o Const.o Var.o Leaf.o ParallelTree.o ParallelForest.o
	$(CC) $(CFLAGS) -o3 -o parallel_main.out parallel_main.o Node.o Const.o Var.o Leaf.o ParallelTree.o ParallelForest.o

parallel_main.o: ./src/main/parallel_main.cpp
	$(CC) $(CFLAGS) -c ./src/main/parallel_main.cpp

Node.o: ./include/grammar/Node.h ./include/grammar/INode.h ./src/grammar/Node.cpp 
	$(CC) $(CFLAGS) -c ./src/grammar/Node.cpp

Const.o: ./include/grammar/Const.h ./include/grammar/INode.h ./src/grammar/Const.cpp
	$(CC) $(CFLAGS) -c ./src/grammar/Const.cpp

Var.o: ./include/grammar/Var.h ./include/grammar/INode.h ./src/grammar/Var.cpp
	$(CC) $(CFLAGS) -c ./src/grammar/Var.cpp

Leaf.o: ./include/grammar/Leaf.h ./include/grammar/INode.h ./src/grammar/Leaf.cpp
	$(CC) $(CFLAGS) -c ./src/grammar/Leaf.cpp

ParallelTree.o: ./include/parallel_genetics/ParallelTree.h ./include/grammar/INode.h ./src/parallel_genetics/ParallelTree.cpp
	$(CC) $(CFLAGS) -c ./src/parallel_genetics/ParallelTree.cpp

ParallelForest.o: ./include/parallel_genetics/ParallelForest.h ./include/grammar/INode.h ./src/parallel_genetics/ParallelForest.cpp
	$(CC) $(CFLAGS) -c ./src/parallel_genetics/ParallelForest.cpp

clean:
	@for s in *.o ; do if [ -e $$s ] ; then rm $$s ; fi done
	@for s in *.out ; do if [ -e $$s ] ; then rm $$s ; fi done
	@echo "cleanup done"

allTests:
	$(CC) $(CFLAGS) -c ./src/test/test_*.cpp
	@for s in test_*.o ; do \
	$(CC) $(CFLAGS) -o $${s%.o}.out $$s Node.o Const.o Var.o Leaf.o Tree.o Forest.o ; \
	echo $${s%.o}.out compiled ; \
	done
